server {
   listen 80;
   server_name _;

   #first match ngx location
   set $template_location "/templates";
   #then match root read file 
   set $template_root "/Users/jinzr/html/lua/templates";

   location /templates {
   	internal;
   	alias "/Users/jinzr/html/lua/templates2";
   }

	location /lua_template_1 {  
	    default_type 'text/html';  
	    lua_code_cache on;  
	    content_by_lua_file conf/lua/test_template_1.lua;  
	}

	location /lua_template_2 {  
	    default_type 'text/html';  
	    lua_code_cache on;  
	    content_by_lua_file conf/lua/test_template_2.lua;  
	}  

	location /lua_template_3 {  
	    default_type 'text/html';  
	    lua_code_cache on;  
	    content_by_lua_file conf/lua/test_template_3.lua;  
	}  


   location /lua {
	default_type 'text/html';
	#lua_code_cache off;
	#content_by_lua 'ngx.say("hello world")';
	content_by_lua_file conf/lua/test.lua;
   }

   location ~ /lua_request/(\d+)(\d+){
	set $a $1;
	set $b $host;
	default_type "text/html";
	content_by_lua_file conf/lua/test_request.lua;
	echo_after_body "ngx.var.b $b";
   }

   location /lua_response_1 {
	default_type "text/html";
	content_by_lua_file conf/lua/test_response_1.lua;
   }

   location /lua_response_2 {
	default_type "text/html";
	content_by_lua_file conf/lua/test_response_2.lua;
   }

   location /lua_other {
	default_type "text/html";
	content_by_lua_file conf/lua/test_other.lua;
   }

   location /lua_shared_dict {
	default_type "text/html";
	content_by_lua_file conf/lua/test_lua_shared_dict.lua;
   }

   location /lua_set_1 {
	default_type "text/html";
	set_by_lua_file $num conf/lua/test_set_1.lua;
	echo $num;
   }
   
   location /lua_rewrite_1 {
	default_type "text/html";
	rewrite_by_lua_file conf/lua/test_rewrite_1.lua;
	echo "no rewrite";
   }
   
   location /lua_rewrite_2{
	default_type "text/html";
	rewrite_by_lua_file conf/lua/test_rewrite_2.lua;
	echo "rewrite2 uri: $uri,a,$arg_a";
   }
   
   location /lua_rewrite_3{
	default_type "text/html";
	rewrite_by_lua_file conf/lua/test_rewrite_3.lua;
	echo "rewrite2 uri: $uri";
   }

   location /lua_access {
	default_type "text/html";
	access_by_lua_file conf/lua/test_access.lua;
	echo "access";
   }

   location /lua_module_1 {
	default_type "text/html";
	lua_code_cache on;
	content_by_lua_file conf/lua/test_module_1.lua;
   }

   location /lua_redis_basic {
	default_type "text/html";
	lua_code_cache on;
	content_by_lua_file conf/lua/test_redis_basic.lua;
   }

   location /lua_mysql {
	default_type 'text/html';
	lua_code_cache on;
	content_by_lua_file conf/lua/test_mysql.lua;
   }

   location /lua_http_1 {  
	   default_type 'text/html';  
	   lua_code_cache on;  
	   content_by_lua_file conf/lua/test_http_1.lua;  
	} 

	location ~ /proxy/(.*){
		internal;
		#content_by_lua 'ngx.say("proxy")';
		proxy_pass http://backend/$1$is_args$args;
		keepalive_timeout 100;
	}

	location /lua_http_2 {  
	   default_type 'text/html';  
	   lua_code_cache on;
	   content_by_lua_file conf/lua/test_http_2.lua;  
	} 

	location /lua_cjson {  
	   default_type 'text/html';  
	   lua_code_cache on;
	   content_by_lua_file conf/lua/test_cjson.lua;  
	} 

	location /lua_dkjson {  
	   default_type 'text/html';  
	   lua_code_cache on;
	   content_by_lua_file conf/lua/test_dkjson.lua;  
	} 

	location /lua_lrucache {  
	   default_type 'text/html';  
	   lua_code_cache on;
	   content_by_lua_file conf/lua/test_lrucache.lua;  
	} 

	location /test1 {  
	    keepalive_timeout 60s;   
	    keepalive_requests 1000;  
	    content_by_lua '  
	        ngx.print("test1 : ", ngx.req.get_uri_args()["a"])  
	        ngx.log(ngx.ERR, "request test1")  
	    ';  
	}  
	
	location /test2 {  
	    keepalive_timeout 60s;   
	    keepalive_requests 1000;  
	    content_by_lua '  
	        ngx.print("test2 : ", ngx.req.get_uri_args()["a"])  
	        ngx.log(ngx.ERR, "request test2")  
	    ';  
	}  

	location /test {  
	     lua_socket_connect_timeout 3s;  
	     lua_socket_send_timeout 3s;  
	     lua_socket_read_timeout 3s;  
	     lua_socket_pool_size 100;  
	     lua_socket_keepalive_timeout 60s;  
	     lua_socket_buffer_size 8k;  
	  
	     content_by_lua '  
	         local res1, res2 = ngx.location.capture_multi{  
	               { "/test1", { args = ngx.req.get_uri_args() } },  
	               { "/test2", { args = ngx.req.get_uri_args()} },  
	         }  
	         if res1.status == ngx.HTTP_OK then  
	             ngx.print(res1.body)  
	         end  
	         if res2.status ~= ngx.HTTP_OK then  
	            --记录错误  
	         end  
	     ';  
	}  
}
